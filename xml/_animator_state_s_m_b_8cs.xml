<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="ja">
  <compounddef id="_animator_state_s_m_b_8cs" kind="file" language="C#">
    <compoundname>AnimatorStateSMB.cs</compoundname>
    <innerclass refid="class_animator_state_s_m_b" prot="public">AnimatorStateSMB</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Collections;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UnityEngine;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>アニメーターのステートを、オブジェクトのステートと連携させるためのクラス</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_animator_state_s_m_b" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_animator_state_s_m_b" kindref="compound">AnimatorStateSMB</ref><sp/>:<sp/>StateMachineBehaviour</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8" refid="class_animator_state_s_m_b_1ae998e144b80559b4380970b25be65f8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[SerializeReference,<sp/>SubclassSelector]<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="class_animator_state_machine_1_1_action_state_base" kindref="compound">AnimatorStateMachine.ActionStateBase</ref><sp/><ref refid="class_animator_state_s_m_b_1ae998e144b80559b4380970b25be65f8e" kindref="member">m_state</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_animator_state_s_m_b_1a7d207f0496c9078d1397c4c2c10e7d29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="class_animator_state_machine" kindref="compound">AnimatorStateMachine</ref><sp/><ref refid="class_animator_state_s_m_b_1a7d207f0496c9078d1397c4c2c10e7d29" kindref="member">m_stateMachine</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OnStateEnter<sp/>is<sp/>called<sp/>when<sp/>a<sp/>transition<sp/>starts<sp/>and<sp/>the<sp/>state<sp/>machine<sp/>starts<sp/>to<sp/>evaluate<sp/>this<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="class_animator_state_s_m_b_1a76f96e633838e49de5cab19b95506113" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_animator_state_s_m_b_1a76f96e633838e49de5cab19b95506113" kindref="member">OnStateEnter</ref>(Animator<sp/>animator,<sp/>AnimatorStateInfo<sp/>stateInfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerIndex)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_animator_state_s_m_b_1a7d207f0496c9078d1397c4c2c10e7d29" kindref="member">m_stateMachine</ref><sp/>==<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_animator_state_s_m_b_1a7d207f0496c9078d1397c4c2c10e7d29" kindref="member">m_stateMachine</ref><sp/>=<sp/>animator.GetComponentInParent&lt;<ref refid="class_animator_state_machine" kindref="compound">AnimatorStateMachine</ref>&gt;();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>初期設定</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_animator_state_s_m_b_1ae998e144b80559b4380970b25be65f8e" kindref="member">m_state</ref>.Initialize(<ref refid="class_animator_state_s_m_b_1a7d207f0496c9078d1397c4c2c10e7d29" kindref="member">m_stateMachine</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ステート変更</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_animator_state_s_m_b_1a7d207f0496c9078d1397c4c2c10e7d29" kindref="member">m_stateMachine</ref>.<ref refid="class_animator_state_machine_1a5fa1e8f26572b99d4d0dbc4dc08a1542" kindref="member">ChangeState</ref>(<ref refid="class_animator_state_s_m_b_1ae998e144b80559b4380970b25be65f8e" kindref="member">m_state</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OnStateUpdate<sp/>is<sp/>called<sp/>on<sp/>each<sp/>Update<sp/>frame<sp/>between<sp/>OnStateEnter<sp/>and<sp/>OnStateExit<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//override<sp/>public<sp/>void<sp/>OnStateUpdate(Animator<sp/>animator,<sp/>AnimatorStateInfo<sp/>stateInfo,<sp/>int<sp/>layerIndex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OnStateExit<sp/>is<sp/>called<sp/>when<sp/>a<sp/>transition<sp/>ends<sp/>and<sp/>the<sp/>state<sp/>machine<sp/>finishes<sp/>evaluating<sp/>this<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_animator_state_s_m_b_1a7eca33d17fe7d0c6eff851192779b8c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_animator_state_s_m_b_1a7eca33d17fe7d0c6eff851192779b8c9" kindref="member">OnStateExit</ref>(Animator<sp/>animator,<sp/>AnimatorStateInfo<sp/>stateInfo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layerIndex)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_state.OnExit();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OnStateMove<sp/>is<sp/>called<sp/>right<sp/>after<sp/>Animator.OnAnimatorMove()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//override<sp/>public<sp/>void<sp/>OnStateMove(Animator<sp/>animator,<sp/>AnimatorStateInfo<sp/>stateInfo,<sp/>int<sp/>layerIndex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Implement<sp/>code<sp/>that<sp/>processes<sp/>and<sp/>affects<sp/>root<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OnStateIK<sp/>is<sp/>called<sp/>right<sp/>after<sp/>Animator.OnAnimatorIK()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//override<sp/>public<sp/>void<sp/>OnStateIK(Animator<sp/>animator,<sp/>AnimatorStateInfo<sp/>stateInfo,<sp/>int<sp/>layerIndex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Implement<sp/>code<sp/>that<sp/>sets<sp/>up<sp/>animation<sp/>IK<sp/>(inverse<sp/>kinematics)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="001_Common/Scripts/AnimatorStateMachine/AnimatorStateSMB.cs"/>
  </compounddef>
</doxygen>
